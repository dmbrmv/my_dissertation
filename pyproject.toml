[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tft-predictions"
version = "0.1.0"
description = "Hydrological time series forecasting using Temporal Fusion Transformer models"
readme = "README.md"
authors = [
    {name = "TFT Predictions Team", email = "team@example.com"}
]
license = {text = "MIT"}
requires-python = ">=3.12"
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0", 
    "polars>=0.20.0",
    "xarray>=2023.1.0",
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
    "torch>=2.0.0",
    "pytorch-lightning>=2.0.0",
    "darts>=0.27.0",
    "scikit-learn>=1.3.0",
    "geopandas>=0.14.0",
    "rasterio>=1.3.0",
    "shapely>=2.0.0",
]

[project.optional-dependencies]
viz = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0", 
    "plotly>=5.15.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.0.270",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.scripts]
tft-train-single = "scripts.train_single_gauge:main"
tft-train-multi = "scripts.train_multi_gauge:main"
tft-predict = "scripts.predict:main"
tft-evaluate = "scripts.evaluate:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]

[tool.ruff]
# Include Jupyter notebooks in linting
extend-include = ["*.ipynb"]
# Set line length to match common Python standards
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Expanded rule selection for better code quality
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort (import sorting)
    "N",    # pep8-naming
    "D",    # pydocstring
    "UP",   # pyupgrade (modernize Python code)
    "B",    # flake8-bugbear (likely bugs)
    "S",    # flake8-bandit (security)
    "C4",   # flake8-comprehensions
    "Q",    # flake8-quotes
    "T20",  # flake8-print (avoid print statements)
]

# Ignore specific rules that might be too strict
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "S101",  # Use of assert (common in tests)
    "T201",  # Allow print statements in scripts
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.lint.isort]
# Configure import sorting
known-first-party = ["floodforecast"]
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
# Use Google docstring convention
convention = "google"

[tool.ruff.format]
# Use double quotes for consistency
quote-style = "double"
# Format docstrings
docstring-code-format = true

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "basic"
exclude = [
    "**/data",
    "/data",
    "**/__pycache__",
    ".venv",
    "build",
    "dist"
]
# Report missing imports
reportMissingImports = true
# Report missing type stubs
reportMissingTypeStubs = false